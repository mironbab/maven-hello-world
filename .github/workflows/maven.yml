# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-maven

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
      

name: Java CI with Maven - Rafael 

on:
  push:
    branches: [ "master" ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven

    - name: Increase app vervion
      run: |
        cd myapp
        mvn build-helper:parse-version versions:set -DnewVersion=\${parsedVersion.majorVersion}.\${parsedVersion.minorVersion}.\${parsedVersion.nextIncrementalVersion} versions:commit 
      
    - name: Build hello-world app
      run: |
        cd myapp
        mvn -B package
        java -cp target/classes com.myapp.App
        mkdir artifact-app && cp target/*.jar artifact-app

    - name: Upload Artifact
      uses: actions/upload-artifact@v3
      with:
        name: my-artifact
        path: myapp/artifact-app
  
  
    - name: Download Artifact
      uses: actions/download-artifact@v3
      with:
        name: my-artifact
        path: target/
    
    -name: Add global variable
      run: |
        cd myapp
        MVN_VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
    
    - name: Create a Docker Image
      run: |
        echo $MVN_VERSION
        docker build --build-arg mvnversion=$MVN_VERSION -t hello-world-app:$MVN_VERSION .

    - name: Push Image to DockerHub
      run: |
        cd myapp
        MVN_VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
        docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
        docker tag hello-world-app:$MVN_VERSION mironbab/hello-world-app:$MVN_VERSION
        docker push mironbab/hello-world-app:$MVN_VERSION
        
    - name: Run a Docker Container
      run: |
        cd myapp
        MVN_VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
        docker run -d -p 8080:8080 --name mironapplicationmaven mironbab/hello-world-app:$MVN_VERSION

    - name: Install Helm chart
      run: |
        cd myapp
        MVN_VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
        cd helm
        sed -i "s/appVersion: \"1.16.0\"/appVersion: $MVN_VERSION/g" Chart.yaml
        helm install hello-world-app .
        helm status hello-world-app